<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poindre.shua.post.ContentMapper">
    <resultMap id="BaseResultMap" type="com.poindre.shua.post.Content">
        <!--@mbg.generated-->
        <!--@Table content-->
        <id column="contentId" jdbcType="BIGINT" property="contentid"/>
        <result column="uuid" jdbcType="BIGINT" property="uuid"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="type_ex" jdbcType="INTEGER" property="type_ex"/>
        <result column="hot" jdbcType="DOUBLE" property="hot"/>
        <result column="sendTime" jdbcType="DATETIMEOFFSET" property="sendTime"/>
        <result column="isBanned" jdbcType="BOOLEAN" property="isBanned"/>
    </resultMap>
    <resultMap id="PostContentMap" type="com.poindre.shua.post.DetailContent">
        <id column="contentId" jdbcType="BIGINT" property="contentid"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="uid" jdbcType="VARCHAR" property="uid"/>
        <result column="signature" jdbcType="VARCHAR" property="signature"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
    </resultMap>
    <resultMap id="HistoryCommentMap" type="com.poindre.shua.post.comment.HistoryComment">
        <id column="contentId" jdbcType="BIGINT" property="contentid"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="uid" jdbcType="VARCHAR" property="uid"/>
        <result column="signature" jdbcType="VARCHAR" property="signature"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="comment" jdbcType="VARCHAR" property="comment"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        contentId, uuid, content, type, type_ex, hot, sendTime, isBanned
    </sql>

    <select id="findAllPosts" resultMap="PostContentMap">
        select contentId, content, u.uid, i.signature, sendTime, avatar, hot
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on u.uuid = i.id
                 join user_account a on a.uuid = u.uuid
        where isBanned = 0
        order by hot desc
    </select>

    <select id="findTypePosts" resultMap="PostContentMap">
        select contentId, content, u.uid, i.signature, sendTime, avatar, hot
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on u.uuid = i.id
                 join user_account a on a.uuid = u.uuid
        where content.type = #{id, jdbcType=INTEGER}
          and isBanned = 0
        order by hot desc
    </select>

    <select id="findAllPostsTime" resultMap="PostContentMap">
        select contentId, content, u.uid, i.signature, sendTime, avatar
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on content.uuid = i.id
                 join user_account a on a.uuid = content.uuid
        where isBanned = 0
        order by sendTime desc
    </select>

    <select id="findTypePostsTime" resultMap="PostContentMap">
        select contentId, content, u.uid, i.signature, sendTime, avatar
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on u.uuid = i.id
                 join user_account a on a.uuid = u.uuid
        where content.type = #{id, jdbcType=INTEGER}
          and isBanned = 0
        order by sendTime desc
    </select>

    <insert id="insertPost" parameterType="com.poindre.shua.post.Content">
        insert into content(uuid, content, type, type_ex, sendTime)
        VALUES (#{uuid,jdbcType=VARCHAR},
                #{content,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{type_ex,jdbcType=INTEGER},
                #{sendTime,jdbcType=TIMESTAMP})
    </insert>

    <select id="findById" resultType="com.poindre.shua.post.DetailContent">
        select contentId, content, u.uid, i.signature, sendTime, avatar
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on u.uuid = i.id
                 join user_account a on a.uuid = u.uuid
        where content.contentId = #{id, jdbcType=INTEGER}
        limit 1
    </select>

    <update id="updateHot" parameterType="com.poindre.shua.post.Hot">
        update content
        set hot = #{hot,jdbcType=DOUBLE}
        where contentId = #{contentid,jdbcType=BIGINT}
    </update>

    <select id="getTime" parameterType="Long" resultType="Date">
        select sendTime
        from content
        where contentId = #{id,jdbcType=BIGINT}
        limit 1
    </select>

    <select id="getPopularity" parameterType="Long" resultType="Double">
        select hot
        from content
        where contentId = #{id,jdbcType=BIGINT}
        limit 1
    </select>

    <select id="historyComment" resultMap="HistoryCommentMap" parameterType="String">
        select contentId,
               content,
               u.uid,
               i.signature,
               sendTime,
               avatar,
               comment,
               cc.time
        from content_comment cc
                 join content c on cc.content_id = c.contentId
                 join user u on c.uuid = u.uuid
                 join user_info i on c.uuid = i.id
                 join user_account a on a.uuid = c.uuid
        where cc.uid = #{uid,jdbcType=VARCHAR}
        order by cc.time desc
    </select>

    <select id="historyFavor" resultMap="PostContentMap" parameterType="String">
        select DISTINCT contentId,
                        content,
                        u.uid,
                        i.signature,
                        sendTime,
                        avatar
        from content_favor cf
                 join user_info i on cf.uuid = i.id
                 join content c on c.contentId = cf.content_id
                 join user u on c.uuid = u.uuid
                 join user_account a on a.uuid = c.uuid
        where cf.uuid = #{uuid,jdbcType=VARCHAR}
        order by cf.time desc
    </select>

    <select id="historyThumb" resultMap="PostContentMap" parameterType="String">
        select DISTINCT contentId,
                        content,
                        u.uid,
                        i.signature,
                        sendTime,
                        avatar
        from content_thumb ct
                 join user_info i on ct.uuid = i.id
                 join content c on c.contentId = ct.content_id
                 join user u on c.uuid = u.uuid
                 join user_account a on a.uuid = c.uuid
        where ct.uuid = #{uuid,jdbcType=VARCHAR}
        order by ct.time desc
    </select>

    <select id="getPostId" parameterType="String" resultType="Long">
        select contentId
        from content
        where uuid = #{id,jdbcType=VARCHAR}
        order by sendTime desc
        limit 1
    </select>

    <select id="getContentNum" parameterType="String" resultType="Integer">
        select count(*)
        from content
        where content.uuid = #{uuid,jdbcType=VARCHAR}
    </select>

    <select id="getTodayContentNum" parameterType="String" resultType="Integer">
        select count(*)
        from content
        where content.uuid = #{uuid,jdbcType=VARCHAR}
          and content.sendTime > now() - 86400
    </select>

    <select id="historyPost" resultMap="PostContentMap" parameterType="String">
        select contentId,
               content,
               u.uid,
               i.signature,
               sendTime,
               avatar,
               hot
        from content
                 join user u on content.uuid = u.uuid
                 join user_info i on content.uuid = i.id
                 join user_account a on a.uuid = content.uuid
        where content.uuid = #{uuid,jdbcType=VARCHAR}
        order by content.sendTime desc
    </select>

    <delete id="deleteByPostId" parameterType="Long">
        delete
        from content
        where contentId = #{id,jdbcType=BIGINT}
    </delete>

    <update id="banPost" parameterType="Long">
        update content
        set isBanned = 1
        where contentId = #{id,jdbcType=BIGINT}
    </update>

    <update id="unbanPost" parameterType="Long">
        update content
        set isBanned = 0
        where contentId = #{id,jdbcType=BIGINT}
    </update>

    <select id="getManagePost" resultMap="BaseResultMap">
        select *
        from content
    </select>

    <select id="forwardGetPost" parameterType="Long" resultType="com.poindre.shua.post.Content">
        select *
        from content
        where contentId = #{id,jdbcType=BIGINT}
        limit 1
    </select>
</mapper>